basePath: /api
definitions:
  auth.AuthRequest:
    description: Request body for user authentication operations.
    properties:
      password:
        example: password123
        type: string
      username:
        example: johndoe
        type: string
    type: object
  auth.ChangePasswordRequest:
    description: Request body for changing the user's password.
    properties:
      new_password:
        example: newpassword123
        type: string
      old_password:
        example: oldpassword123
        type: string
      username:
        example: johndoe
        type: string
    type: object
  expenses.Expense:
    properties:
      amount:
        type: number
      category:
        type: string
      date:
        description: 'Format: YYYY-MM-DD'
        type: string
      description:
        description: Description of the expense
        type: string
      id:
        type: integer
    type: object
  expenses.UpdateExpenseRequest:
    properties:
      amount:
        type: number
      category:
        type: string
      date:
        type: string
      description:
        type: string
    type: object
  incomes.Income:
    properties:
      amount:
        type: number
      category:
        type: string
      date:
        type: string
      description:
        type: string
    type: object
  users.UpdateUserNamesRequest:
    properties:
      first_name:
        example: John
        type: string
      second_name:
        example: Doe
        type: string
    type: object
host: https://cg-api.ffokildam.ru:8443/
info:
  contact: {}
  description: Api CG T-Bank Finance management
  title: TBank API
  version: "1.4"
paths:
  /api/expense:
    get:
      consumes:
      - application/json
      description: Fetches all expenses for the authenticated user within the specified
        date range (from YYYY-MM-DD to YYYY-MM-DD)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: from
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of expenses
          schema:
            items:
              $ref: '#/definitions/expenses.Expense'
            type: array
        "400":
          description: Invalid date format
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to fetch expenses
          schema:
            type: string
      tags:
      - Expenses
    post:
      consumes:
      - application/json
      description: Adds a new expense record and adjusts the user's expense balance.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: New expense details
        in: body
        name: expense
        required: true
        schema:
          $ref: '#/definitions/expenses.UpdateExpenseRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: Expense added successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to add expense
          schema:
            type: string
      summary: Add Expense
      tags:
      - Expenses
  /api/expense/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific expense record and updates the user's expense
        balance.
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID parameter
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Expense not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Expense
      tags:
      - Expenses
  /api/income:
    get:
      consumes:
      - application/json
      description: Retrieves all income records for a user within the specified date
        range.
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: from
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Incomes list
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Invalid date format or missing parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Incomes within a date range
      tags:
      - Incomes
    post:
      consumes:
      - application/json
      description: Add a new income record for the authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Income details
        in: body
        name: income
        required: true
        schema:
          $ref: '#/definitions/incomes.Income'
      produces:
      - text/plain
      responses:
        "201":
          description: Income added successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to add income
          schema:
            type: string
      tags:
      - Incomes
  /api/income/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific income record by its unique ID and updates the
        user's income balance.
      parameters:
      - description: Income ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Income not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete Income by ID
      tags:
      - Incomes
  /api/users/:
    get:
      description: Fetches all information about the logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: User info
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User Info
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates the first and second name of the logged-in user.
      parameters:
      - description: First and Second Name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/users.UpdateUserNamesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update User Names
      tags:
      - Users
  /change-password:
    post:
      consumes:
      - application/json
      description: Update the user's password after verifying the old password
      parameters:
      - description: Change Password Information
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid old password
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Error updating password
          schema:
            type: string
      summary: Change user password
      tags:
      - Auth
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Error generating token
          schema:
            type: string
      summary: Login a user
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user in the system with a username and password
      parameters:
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.AuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Error registering user
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
swagger: "2.0"
